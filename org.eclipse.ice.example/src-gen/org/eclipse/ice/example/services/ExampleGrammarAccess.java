/*
 * generated by Xtext 2.9.2
 */
package org.eclipse.ice.example.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ExampleGrammarAccess extends AbstractGrammarElementFinder {
	
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ice.example.Example.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cSectionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSectionsSectionParserRuleCall_2_0 = (RuleCall)cSectionsAssignment_2.eContents().get(0);
		
		//Input:
		//	{Input} NEWLINE*
		//	sections+=Section*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Input} NEWLINE* sections+=Section*
		public Group getGroup() { return cGroup; }
		
		//{Input}
		public Action getInputAction_0() { return cInputAction_0; }
		
		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_1() { return cNEWLINETerminalRuleCall_1; }
		
		//sections+=Section*
		public Assignment getSectionsAssignment_2() { return cSectionsAssignment_2; }
		
		//Section
		public RuleCall getSectionsSectionParserRuleCall_2_0() { return cSectionsSectionParserRuleCall_2_0; }
	}
	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ice.example.Example.Section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOPENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cSectionNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSectionNameIDTerminalRuleCall_1_0 = (RuleCall)cSectionNameAssignment_1.eContents().get(0);
		private final RuleCall cCLOSETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cNEWLINETerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cLinesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLinesLineParserRuleCall_3_1_0 = (RuleCall)cLinesAssignment_3_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Section:
		//	OPEN+ sectionName=ID+ CLOSE (NEWLINE+ lines+=Line)+
		//	NEWLINE+;
		@Override public ParserRule getRule() { return rule; }
		
		//OPEN+ sectionName=ID+ CLOSE (NEWLINE+ lines+=Line)+ NEWLINE+
		public Group getGroup() { return cGroup; }
		
		//OPEN+
		public RuleCall getOPENTerminalRuleCall_0() { return cOPENTerminalRuleCall_0; }
		
		//sectionName=ID+
		public Assignment getSectionNameAssignment_1() { return cSectionNameAssignment_1; }
		
		//ID
		public RuleCall getSectionNameIDTerminalRuleCall_1_0() { return cSectionNameIDTerminalRuleCall_1_0; }
		
		//CLOSE
		public RuleCall getCLOSETerminalRuleCall_2() { return cCLOSETerminalRuleCall_2; }
		
		//(NEWLINE+ lines+=Line)+
		public Group getGroup_3() { return cGroup_3; }
		
		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_3_0() { return cNEWLINETerminalRuleCall_3_0; }
		
		//lines+=Line
		public Assignment getLinesAssignment_3_1() { return cLinesAssignment_3_1; }
		
		//Line
		public RuleCall getLinesLineParserRuleCall_3_1_0() { return cLinesLineParserRuleCall_3_1_0; }
		
		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }
	}
	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ice.example.Example.Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarNameIDTerminalRuleCall_0_0 = (RuleCall)cVarNameAssignment_0.eContents().get(0);
		private final RuleCall cASSIGNTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueTEXTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Line:
		//	varName=ID+ ASSIGN+ value=TEXT;
		@Override public ParserRule getRule() { return rule; }
		
		//varName=ID+ ASSIGN+ value=TEXT
		public Group getGroup() { return cGroup; }
		
		//varName=ID+
		public Assignment getVarNameAssignment_0() { return cVarNameAssignment_0; }
		
		//ID
		public RuleCall getVarNameIDTerminalRuleCall_0_0() { return cVarNameIDTerminalRuleCall_0_0; }
		
		//ASSIGN+
		public RuleCall getASSIGNTerminalRuleCall_1() { return cASSIGNTerminalRuleCall_1; }
		
		//value=TEXT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//TEXT
		public RuleCall getValueTEXTTerminalRuleCall_2_0() { return cValueTEXTTerminalRuleCall_2_0; }
	}
	
	
	private final InputElements pInput;
	private final SectionElements pSection;
	private final LineElements pLine;
	private final TerminalRule tID;
	private final TerminalRule tTEXT;
	private final TerminalRule tNEWLINE;
	private final TerminalRule tWHITESPACE;
	private final TerminalRule tOPEN;
	private final TerminalRule tCLOSE;
	private final TerminalRule tASSIGN;
	private final TerminalRule tCOMMENT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExampleGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pInput = new InputElements();
		this.pSection = new SectionElements();
		this.pLine = new LineElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ice.example.Example.ID");
		this.tTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ice.example.Example.TEXT");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ice.example.Example.NEWLINE");
		this.tWHITESPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ice.example.Example.WHITESPACE");
		this.tOPEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ice.example.Example.OPEN");
		this.tCLOSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ice.example.Example.CLOSE");
		this.tASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ice.example.Example.ASSIGN");
		this.tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ice.example.Example.COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.ice.example.Example".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Input:
	//	{Input} NEWLINE*
	//	sections+=Section*;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Section:
	//	OPEN+ sectionName=ID+ CLOSE (NEWLINE+ lines+=Line)+
	//	NEWLINE+;
	public SectionElements getSectionAccess() {
		return pSection;
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}
	
	//Line:
	//	varName=ID+ ASSIGN+ value=TEXT;
	public LineElements getLineAccess() {
		return pLine;
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}
	
	//terminal ID:
	//	('A'..'Z' | 'a'..'z') ('A'..'Z' | 'a'..'z' | '_' | '-' | '0'..'9');
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal TEXT:
	//	WHITESPACE+ | STRING+*;
	public TerminalRule getTEXTRule() {
		return tTEXT;
	}
	
	//terminal NEWLINE:
	//	'\r'? '\n'+;
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal WHITESPACE:
	//	' ' | '\t'+;
	public TerminalRule getWHITESPACERule() {
		return tWHITESPACE;
	}
	
	//terminal OPEN:
	//	'[';
	public TerminalRule getOPENRule() {
		return tOPEN;
	}
	
	//terminal CLOSE:
	//	']';
	public TerminalRule getCLOSERule() {
		return tCLOSE;
	}
	
	//terminal ASSIGN:
	//	'=';
	public TerminalRule getASSIGNRule() {
		return tASSIGN;
	}
	
	//terminal COMMENT:
	//	'#' (WHITESPACE+ | STRING+)*;
	public TerminalRule getCOMMENTRule() {
		return tCOMMENT;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

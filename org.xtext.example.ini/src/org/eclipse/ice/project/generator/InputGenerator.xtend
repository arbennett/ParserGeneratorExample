/*
 * generated by Xtext 2.9.1
 */
package org.eclipse.ice.project.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.ice.project.project.Section
import org.eclipse.ice.project.project.Input
import org.eclipse.ice.project.project.Line

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class InputGenerator extends AbstractGenerator {


	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for( i : resource.allContents.toIterable.filter(Input) ) {
			fsa.generateFile("SampleReader.java", i.compile)
		}
	}
	
	def compile(Input i) '''
	package $PACKAGE_NAME$
	
	public class $CLASS_NAME$Reader() {}
	
	public Form Read(IFile file) {
		Form form = new Form();
		DataComponent comp;
		Entry ent;
		
		«FOR s:i.sections»
			// Create a data component
			«s.compile»
		«ENDFOR»
		
		return form;
	}
	'''
	
	def compile(Section s) '''
		comp = new DataComponent();
		comp.setName(s.name);
		«FOR l : s.lines»
			// Create 
			«l.compile»
		«ENDFOR»
		form.addComponent(comp);
	'''
	
	def compile(Line l) '''
		ent = new Entry();
		ent.setName(«l.name»);
		ent.setValue(«l.value»);
		comp.addEntry(ent);
	'''

}
